// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/dataset"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-population-types-api/service"
	"sync"
)

// Ensure, that DatasetAPIClientMock does implement service.DatasetAPIClient.
// If this is not the case, regenerate this file with moq.
var _ service.DatasetAPIClient = &DatasetAPIClientMock{}

// DatasetAPIClientMock is a mock implementation of service.DatasetAPIClient.
//
// 	func TestSomethingThatUsesDatasetAPIClient(t *testing.T) {
//
// 		// make and configure a mocked service.DatasetAPIClient
// 		mockedDatasetAPIClient := &DatasetAPIClientMock{
// 			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetDatasetsFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, q *dataset.QueryParams) (dataset.List, error) {
// 				panic("mock out the GetDatasets method")
// 			},
// 		}
//
// 		// use mockedDatasetAPIClient in code that requires service.DatasetAPIClient
// 		// and then make assertions.
//
// 	}
type DatasetAPIClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// GetDatasetsFunc mocks the GetDatasets method.
	GetDatasetsFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, q *dataset.QueryParams) (dataset.List, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// GetDatasets holds details about calls to the GetDatasets method.
		GetDatasets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Q is the q argument value.
			Q *dataset.QueryParams
		}
	}
	lockChecker     sync.RWMutex
	lockGetDatasets sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *DatasetAPIClientMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("DatasetAPIClientMock.CheckerFunc: method is nil but DatasetAPIClient.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedDatasetAPIClient.CheckerCalls())
func (mock *DatasetAPIClientMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetDatasets calls GetDatasetsFunc.
func (mock *DatasetAPIClientMock) GetDatasets(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, q *dataset.QueryParams) (dataset.List, error) {
	if mock.GetDatasetsFunc == nil {
		panic("DatasetAPIClientMock.GetDatasetsFunc: method is nil but DatasetAPIClient.GetDatasets was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		Q                *dataset.QueryParams
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		Q:                q,
	}
	mock.lockGetDatasets.Lock()
	mock.calls.GetDatasets = append(mock.calls.GetDatasets, callInfo)
	mock.lockGetDatasets.Unlock()
	return mock.GetDatasetsFunc(ctx, userAuthToken, serviceAuthToken, collectionID, q)
}

// GetDatasetsCalls gets all the calls that were made to GetDatasets.
// Check the length with:
//     len(mockedDatasetAPIClient.GetDatasetsCalls())
func (mock *DatasetAPIClientMock) GetDatasetsCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	Q                *dataset.QueryParams
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		Q                *dataset.QueryParams
	}
	mock.lockGetDatasets.RLock()
	calls = mock.calls.GetDatasets
	mock.lockGetDatasets.RUnlock()
	return calls
}
