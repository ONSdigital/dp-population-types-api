// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/cantabular"
	"github.com/ONSdigital/dp-api-clients-go/v2/cantabular/gql"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-population-types-api/service"
	"io"
	"sync"
)

// Ensure, that CantabularClientMock does implement service.CantabularClient.
// If this is not the case, regenerate this file with moq.
var _ service.CantabularClient = &CantabularClientMock{}

// CantabularClientMock is a mock implementation of service.CantabularClient.
//
//	func TestSomethingThatUsesCantabularClient(t *testing.T) {
//
//		// make and configure a mocked service.CantabularClient
//		mockedCantabularClient := &CantabularClientMock{
//			CheckQueryCountFunc: func(contextMoqParam context.Context, staticDatasetQueryRequest cantabular.StaticDatasetQueryRequest) (int, error) {
//				panic("mock out the CheckQueryCount method")
//			},
//			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			CheckerAPIExtFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
//				panic("mock out the CheckerAPIExt method")
//			},
//			GetAreaFunc: func(contextMoqParam context.Context, getAreaRequest cantabular.GetAreaRequest) (*cantabular.GetAreaResponse, error) {
//				panic("mock out the GetArea method")
//			},
//			GetAreasFunc: func(contextMoqParam context.Context, getAreasRequest cantabular.GetAreasRequest) (*cantabular.GetAreasResponse, error) {
//				panic("mock out the GetAreas method")
//			},
//			GetAreasTotalCountFunc: func(contextMoqParam context.Context, getAreasRequest cantabular.GetAreasRequest) (int, error) {
//				panic("mock out the GetAreasTotalCount method")
//			},
//			GetBaseVariableFunc: func(contextMoqParam context.Context, getBaseVariableRequest cantabular.GetBaseVariableRequest) (*cantabular.GetBaseVariableResponse, error) {
//				panic("mock out the GetBaseVariable method")
//			},
//			GetBlockedAreaCountFunc: func(ctx context.Context, req cantabular.GetBlockedAreaCountRequest) (*cantabular.GetBlockedAreaCountResult, error) {
//				panic("mock out the GetBlockedAreaCount method")
//			},
//			GetCategorisationsFunc: func(contextMoqParam context.Context, getCategorisationsRequest cantabular.GetCategorisationsRequest) (*cantabular.GetCategorisationsResponse, error) {
//				panic("mock out the GetCategorisations method")
//			},
//			GetDimensionCategoriesFunc: func(contextMoqParam context.Context, getDimensionCategoriesRequest cantabular.GetDimensionCategoriesRequest) (*cantabular.GetDimensionCategoriesResponse, error) {
//				panic("mock out the GetDimensionCategories method")
//			},
//			GetDimensionsFunc: func(contextMoqParam context.Context, getDimensionsRequest cantabular.GetDimensionsRequest) (*cantabular.GetDimensionsResponse, error) {
//				panic("mock out the GetDimensions method")
//			},
//			GetDimensionsDescriptionFunc: func(contextMoqParam context.Context, getDimensionsDescriptionRequest cantabular.GetDimensionsDescriptionRequest) (*cantabular.GetDimensionsResponse, error) {
//				panic("mock out the GetDimensionsDescription method")
//			},
//			GetGeographyDimensionsFunc: func(ctx context.Context, req cantabular.GetGeographyDimensionsRequest) (*cantabular.GetGeographyDimensionsResponse, error) {
//				panic("mock out the GetGeographyDimensions method")
//			},
//			GetParentAreaCountFunc: func(ctx context.Context, req cantabular.GetParentAreaCountRequest) (*cantabular.GetParentAreaCountResult, error) {
//				panic("mock out the GetParentAreaCount method")
//			},
//			GetParentsFunc: func(contextMoqParam context.Context, getParentsRequest cantabular.GetParentsRequest) (*cantabular.GetParentsResponse, error) {
//				panic("mock out the GetParents method")
//			},
//			ListDatasetsFunc: func(contextMoqParam context.Context) (*cantabular.ListDatasetsResponse, error) {
//				panic("mock out the ListDatasets method")
//			},
//			StaticDatasetQueryFunc: func(contextMoqParam context.Context, staticDatasetQueryRequest cantabular.StaticDatasetQueryRequest) (*cantabular.StaticDatasetQuery, error) {
//				panic("mock out the StaticDatasetQuery method")
//			},
//			StaticDatasetQueryStreamJsonFunc: func(contextMoqParam context.Context, staticDatasetQueryRequest cantabular.StaticDatasetQueryRequest, fn func(ctx context.Context, r io.Reader) error) (cantabular.GetObservationsResponse, error) {
//				panic("mock out the StaticDatasetQueryStreamJson method")
//			},
//			StaticDatasetTypeFunc: func(ctx context.Context, datasetName string) (*gql.Dataset, error) {
//				panic("mock out the StaticDatasetType method")
//			},
//			StatusCodeFunc: func(err error) int {
//				panic("mock out the StatusCode method")
//			},
//		}
//
//		// use mockedCantabularClient in code that requires service.CantabularClient
//		// and then make assertions.
//
//	}
type CantabularClientMock struct {
	// CheckQueryCountFunc mocks the CheckQueryCount method.
	CheckQueryCountFunc func(contextMoqParam context.Context, staticDatasetQueryRequest cantabular.StaticDatasetQueryRequest) (int, error)

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CheckerAPIExtFunc mocks the CheckerAPIExt method.
	CheckerAPIExtFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// GetAreaFunc mocks the GetArea method.
	GetAreaFunc func(contextMoqParam context.Context, getAreaRequest cantabular.GetAreaRequest) (*cantabular.GetAreaResponse, error)

	// GetAreasFunc mocks the GetAreas method.
	GetAreasFunc func(contextMoqParam context.Context, getAreasRequest cantabular.GetAreasRequest) (*cantabular.GetAreasResponse, error)

	// GetAreasTotalCountFunc mocks the GetAreasTotalCount method.
	GetAreasTotalCountFunc func(contextMoqParam context.Context, getAreasRequest cantabular.GetAreasRequest) (int, error)

	// GetBaseVariableFunc mocks the GetBaseVariable method.
	GetBaseVariableFunc func(contextMoqParam context.Context, getBaseVariableRequest cantabular.GetBaseVariableRequest) (*cantabular.GetBaseVariableResponse, error)

	// GetBlockedAreaCountFunc mocks the GetBlockedAreaCount method.
	GetBlockedAreaCountFunc func(ctx context.Context, req cantabular.GetBlockedAreaCountRequest) (*cantabular.GetBlockedAreaCountResult, error)

	// GetCategorisationsFunc mocks the GetCategorisations method.
	GetCategorisationsFunc func(contextMoqParam context.Context, getCategorisationsRequest cantabular.GetCategorisationsRequest) (*cantabular.GetCategorisationsResponse, error)

	// GetDimensionCategoriesFunc mocks the GetDimensionCategories method.
	GetDimensionCategoriesFunc func(contextMoqParam context.Context, getDimensionCategoriesRequest cantabular.GetDimensionCategoriesRequest) (*cantabular.GetDimensionCategoriesResponse, error)

	// GetDimensionsFunc mocks the GetDimensions method.
	GetDimensionsFunc func(contextMoqParam context.Context, getDimensionsRequest cantabular.GetDimensionsRequest) (*cantabular.GetDimensionsResponse, error)

	// GetDimensionsDescriptionFunc mocks the GetDimensionsDescription method.
	GetDimensionsDescriptionFunc func(contextMoqParam context.Context, getDimensionsDescriptionRequest cantabular.GetDimensionsDescriptionRequest) (*cantabular.GetDimensionsResponse, error)

	// GetGeographyDimensionsFunc mocks the GetGeographyDimensions method.
	GetGeographyDimensionsFunc func(ctx context.Context, req cantabular.GetGeographyDimensionsRequest) (*cantabular.GetGeographyDimensionsResponse, error)

	// GetParentAreaCountFunc mocks the GetParentAreaCount method.
	GetParentAreaCountFunc func(ctx context.Context, req cantabular.GetParentAreaCountRequest) (*cantabular.GetParentAreaCountResult, error)

	// GetParentsFunc mocks the GetParents method.
	GetParentsFunc func(contextMoqParam context.Context, getParentsRequest cantabular.GetParentsRequest) (*cantabular.GetParentsResponse, error)

	// ListDatasetsFunc mocks the ListDatasets method.
	ListDatasetsFunc func(contextMoqParam context.Context) (*cantabular.ListDatasetsResponse, error)

	// StaticDatasetQueryFunc mocks the StaticDatasetQuery method.
	StaticDatasetQueryFunc func(contextMoqParam context.Context, staticDatasetQueryRequest cantabular.StaticDatasetQueryRequest) (*cantabular.StaticDatasetQuery, error)

	// StaticDatasetQueryStreamJsonFunc mocks the StaticDatasetQueryStreamJson method.
	StaticDatasetQueryStreamJsonFunc func(contextMoqParam context.Context, staticDatasetQueryRequest cantabular.StaticDatasetQueryRequest, fn func(ctx context.Context, r io.Reader) error) (cantabular.GetObservationsResponse, error)

	// StaticDatasetTypeFunc mocks the StaticDatasetType method.
	StaticDatasetTypeFunc func(ctx context.Context, datasetName string) (*gql.Dataset, error)

	// StatusCodeFunc mocks the StatusCode method.
	StatusCodeFunc func(err error) int

	// calls tracks calls to the methods.
	calls struct {
		// CheckQueryCount holds details about calls to the CheckQueryCount method.
		CheckQueryCount []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StaticDatasetQueryRequest is the staticDatasetQueryRequest argument value.
			StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// CheckerAPIExt holds details about calls to the CheckerAPIExt method.
		CheckerAPIExt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// GetArea holds details about calls to the GetArea method.
		GetArea []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetAreaRequest is the getAreaRequest argument value.
			GetAreaRequest cantabular.GetAreaRequest
		}
		// GetAreas holds details about calls to the GetAreas method.
		GetAreas []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetAreasRequest is the getAreasRequest argument value.
			GetAreasRequest cantabular.GetAreasRequest
		}
		// GetAreasTotalCount holds details about calls to the GetAreasTotalCount method.
		GetAreasTotalCount []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetAreasRequest is the getAreasRequest argument value.
			GetAreasRequest cantabular.GetAreasRequest
		}
		// GetBaseVariable holds details about calls to the GetBaseVariable method.
		GetBaseVariable []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBaseVariableRequest is the getBaseVariableRequest argument value.
			GetBaseVariableRequest cantabular.GetBaseVariableRequest
		}
		// GetBlockedAreaCount holds details about calls to the GetBlockedAreaCount method.
		GetBlockedAreaCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req cantabular.GetBlockedAreaCountRequest
		}
		// GetCategorisations holds details about calls to the GetCategorisations method.
		GetCategorisations []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetCategorisationsRequest is the getCategorisationsRequest argument value.
			GetCategorisationsRequest cantabular.GetCategorisationsRequest
		}
		// GetDimensionCategories holds details about calls to the GetDimensionCategories method.
		GetDimensionCategories []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetDimensionCategoriesRequest is the getDimensionCategoriesRequest argument value.
			GetDimensionCategoriesRequest cantabular.GetDimensionCategoriesRequest
		}
		// GetDimensions holds details about calls to the GetDimensions method.
		GetDimensions []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetDimensionsRequest is the getDimensionsRequest argument value.
			GetDimensionsRequest cantabular.GetDimensionsRequest
		}
		// GetDimensionsDescription holds details about calls to the GetDimensionsDescription method.
		GetDimensionsDescription []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetDimensionsDescriptionRequest is the getDimensionsDescriptionRequest argument value.
			GetDimensionsDescriptionRequest cantabular.GetDimensionsDescriptionRequest
		}
		// GetGeographyDimensions holds details about calls to the GetGeographyDimensions method.
		GetGeographyDimensions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req cantabular.GetGeographyDimensionsRequest
		}
		// GetParentAreaCount holds details about calls to the GetParentAreaCount method.
		GetParentAreaCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req cantabular.GetParentAreaCountRequest
		}
		// GetParents holds details about calls to the GetParents method.
		GetParents []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetParentsRequest is the getParentsRequest argument value.
			GetParentsRequest cantabular.GetParentsRequest
		}
		// ListDatasets holds details about calls to the ListDatasets method.
		ListDatasets []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// StaticDatasetQuery holds details about calls to the StaticDatasetQuery method.
		StaticDatasetQuery []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StaticDatasetQueryRequest is the staticDatasetQueryRequest argument value.
			StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
		}
		// StaticDatasetQueryStreamJson holds details about calls to the StaticDatasetQueryStreamJson method.
		StaticDatasetQueryStreamJson []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StaticDatasetQueryRequest is the staticDatasetQueryRequest argument value.
			StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
			// Fn is the fn argument value.
			Fn func(ctx context.Context, r io.Reader) error
		}
		// StaticDatasetType holds details about calls to the StaticDatasetType method.
		StaticDatasetType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DatasetName is the datasetName argument value.
			DatasetName string
		}
		// StatusCode holds details about calls to the StatusCode method.
		StatusCode []struct {
			// Err is the err argument value.
			Err error
		}
	}
	lockCheckQueryCount              sync.RWMutex
	lockChecker                      sync.RWMutex
	lockCheckerAPIExt                sync.RWMutex
	lockGetArea                      sync.RWMutex
	lockGetAreas                     sync.RWMutex
	lockGetAreasTotalCount           sync.RWMutex
	lockGetBaseVariable              sync.RWMutex
	lockGetBlockedAreaCount          sync.RWMutex
	lockGetCategorisations           sync.RWMutex
	lockGetDimensionCategories       sync.RWMutex
	lockGetDimensions                sync.RWMutex
	lockGetDimensionsDescription     sync.RWMutex
	lockGetGeographyDimensions       sync.RWMutex
	lockGetParentAreaCount           sync.RWMutex
	lockGetParents                   sync.RWMutex
	lockListDatasets                 sync.RWMutex
	lockStaticDatasetQuery           sync.RWMutex
	lockStaticDatasetQueryStreamJson sync.RWMutex
	lockStaticDatasetType            sync.RWMutex
	lockStatusCode                   sync.RWMutex
}

// CheckQueryCount calls CheckQueryCountFunc.
func (mock *CantabularClientMock) CheckQueryCount(contextMoqParam context.Context, staticDatasetQueryRequest cantabular.StaticDatasetQueryRequest) (int, error) {
	if mock.CheckQueryCountFunc == nil {
		panic("CantabularClientMock.CheckQueryCountFunc: method is nil but CantabularClient.CheckQueryCount was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
	}{
		ContextMoqParam:           contextMoqParam,
		StaticDatasetQueryRequest: staticDatasetQueryRequest,
	}
	mock.lockCheckQueryCount.Lock()
	mock.calls.CheckQueryCount = append(mock.calls.CheckQueryCount, callInfo)
	mock.lockCheckQueryCount.Unlock()
	return mock.CheckQueryCountFunc(contextMoqParam, staticDatasetQueryRequest)
}

// CheckQueryCountCalls gets all the calls that were made to CheckQueryCount.
// Check the length with:
//
//	len(mockedCantabularClient.CheckQueryCountCalls())
func (mock *CantabularClientMock) CheckQueryCountCalls() []struct {
	ContextMoqParam           context.Context
	StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
} {
	var calls []struct {
		ContextMoqParam           context.Context
		StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
	}
	mock.lockCheckQueryCount.RLock()
	calls = mock.calls.CheckQueryCount
	mock.lockCheckQueryCount.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *CantabularClientMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("CantabularClientMock.CheckerFunc: method is nil but CantabularClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedCantabularClient.CheckerCalls())
func (mock *CantabularClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// CheckerAPIExt calls CheckerAPIExtFunc.
func (mock *CantabularClientMock) CheckerAPIExt(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerAPIExtFunc == nil {
		panic("CantabularClientMock.CheckerAPIExtFunc: method is nil but CantabularClient.CheckerAPIExt was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockCheckerAPIExt.Lock()
	mock.calls.CheckerAPIExt = append(mock.calls.CheckerAPIExt, callInfo)
	mock.lockCheckerAPIExt.Unlock()
	return mock.CheckerAPIExtFunc(ctx, state)
}

// CheckerAPIExtCalls gets all the calls that were made to CheckerAPIExt.
// Check the length with:
//
//	len(mockedCantabularClient.CheckerAPIExtCalls())
func (mock *CantabularClientMock) CheckerAPIExtCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockCheckerAPIExt.RLock()
	calls = mock.calls.CheckerAPIExt
	mock.lockCheckerAPIExt.RUnlock()
	return calls
}

// GetArea calls GetAreaFunc.
func (mock *CantabularClientMock) GetArea(contextMoqParam context.Context, getAreaRequest cantabular.GetAreaRequest) (*cantabular.GetAreaResponse, error) {
	if mock.GetAreaFunc == nil {
		panic("CantabularClientMock.GetAreaFunc: method is nil but CantabularClient.GetArea was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetAreaRequest  cantabular.GetAreaRequest
	}{
		ContextMoqParam: contextMoqParam,
		GetAreaRequest:  getAreaRequest,
	}
	mock.lockGetArea.Lock()
	mock.calls.GetArea = append(mock.calls.GetArea, callInfo)
	mock.lockGetArea.Unlock()
	return mock.GetAreaFunc(contextMoqParam, getAreaRequest)
}

// GetAreaCalls gets all the calls that were made to GetArea.
// Check the length with:
//
//	len(mockedCantabularClient.GetAreaCalls())
func (mock *CantabularClientMock) GetAreaCalls() []struct {
	ContextMoqParam context.Context
	GetAreaRequest  cantabular.GetAreaRequest
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetAreaRequest  cantabular.GetAreaRequest
	}
	mock.lockGetArea.RLock()
	calls = mock.calls.GetArea
	mock.lockGetArea.RUnlock()
	return calls
}

// GetAreas calls GetAreasFunc.
func (mock *CantabularClientMock) GetAreas(contextMoqParam context.Context, getAreasRequest cantabular.GetAreasRequest) (*cantabular.GetAreasResponse, error) {
	if mock.GetAreasFunc == nil {
		panic("CantabularClientMock.GetAreasFunc: method is nil but CantabularClient.GetAreas was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetAreasRequest cantabular.GetAreasRequest
	}{
		ContextMoqParam: contextMoqParam,
		GetAreasRequest: getAreasRequest,
	}
	mock.lockGetAreas.Lock()
	mock.calls.GetAreas = append(mock.calls.GetAreas, callInfo)
	mock.lockGetAreas.Unlock()
	return mock.GetAreasFunc(contextMoqParam, getAreasRequest)
}

// GetAreasCalls gets all the calls that were made to GetAreas.
// Check the length with:
//
//	len(mockedCantabularClient.GetAreasCalls())
func (mock *CantabularClientMock) GetAreasCalls() []struct {
	ContextMoqParam context.Context
	GetAreasRequest cantabular.GetAreasRequest
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetAreasRequest cantabular.GetAreasRequest
	}
	mock.lockGetAreas.RLock()
	calls = mock.calls.GetAreas
	mock.lockGetAreas.RUnlock()
	return calls
}

// GetAreasTotalCount calls GetAreasTotalCountFunc.
func (mock *CantabularClientMock) GetAreasTotalCount(contextMoqParam context.Context, getAreasRequest cantabular.GetAreasRequest) (int, error) {
	if mock.GetAreasTotalCountFunc == nil {
		panic("CantabularClientMock.GetAreasTotalCountFunc: method is nil but CantabularClient.GetAreasTotalCount was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetAreasRequest cantabular.GetAreasRequest
	}{
		ContextMoqParam: contextMoqParam,
		GetAreasRequest: getAreasRequest,
	}
	mock.lockGetAreasTotalCount.Lock()
	mock.calls.GetAreasTotalCount = append(mock.calls.GetAreasTotalCount, callInfo)
	mock.lockGetAreasTotalCount.Unlock()
	return mock.GetAreasTotalCountFunc(contextMoqParam, getAreasRequest)
}

// GetAreasTotalCountCalls gets all the calls that were made to GetAreasTotalCount.
// Check the length with:
//
//	len(mockedCantabularClient.GetAreasTotalCountCalls())
func (mock *CantabularClientMock) GetAreasTotalCountCalls() []struct {
	ContextMoqParam context.Context
	GetAreasRequest cantabular.GetAreasRequest
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetAreasRequest cantabular.GetAreasRequest
	}
	mock.lockGetAreasTotalCount.RLock()
	calls = mock.calls.GetAreasTotalCount
	mock.lockGetAreasTotalCount.RUnlock()
	return calls
}

// GetBaseVariable calls GetBaseVariableFunc.
func (mock *CantabularClientMock) GetBaseVariable(contextMoqParam context.Context, getBaseVariableRequest cantabular.GetBaseVariableRequest) (*cantabular.GetBaseVariableResponse, error) {
	if mock.GetBaseVariableFunc == nil {
		panic("CantabularClientMock.GetBaseVariableFunc: method is nil but CantabularClient.GetBaseVariable was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		GetBaseVariableRequest cantabular.GetBaseVariableRequest
	}{
		ContextMoqParam:        contextMoqParam,
		GetBaseVariableRequest: getBaseVariableRequest,
	}
	mock.lockGetBaseVariable.Lock()
	mock.calls.GetBaseVariable = append(mock.calls.GetBaseVariable, callInfo)
	mock.lockGetBaseVariable.Unlock()
	return mock.GetBaseVariableFunc(contextMoqParam, getBaseVariableRequest)
}

// GetBaseVariableCalls gets all the calls that were made to GetBaseVariable.
// Check the length with:
//
//	len(mockedCantabularClient.GetBaseVariableCalls())
func (mock *CantabularClientMock) GetBaseVariableCalls() []struct {
	ContextMoqParam        context.Context
	GetBaseVariableRequest cantabular.GetBaseVariableRequest
} {
	var calls []struct {
		ContextMoqParam        context.Context
		GetBaseVariableRequest cantabular.GetBaseVariableRequest
	}
	mock.lockGetBaseVariable.RLock()
	calls = mock.calls.GetBaseVariable
	mock.lockGetBaseVariable.RUnlock()
	return calls
}

// GetBlockedAreaCount calls GetBlockedAreaCountFunc.
func (mock *CantabularClientMock) GetBlockedAreaCount(ctx context.Context, req cantabular.GetBlockedAreaCountRequest) (*cantabular.GetBlockedAreaCountResult, error) {
	if mock.GetBlockedAreaCountFunc == nil {
		panic("CantabularClientMock.GetBlockedAreaCountFunc: method is nil but CantabularClient.GetBlockedAreaCount was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req cantabular.GetBlockedAreaCountRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGetBlockedAreaCount.Lock()
	mock.calls.GetBlockedAreaCount = append(mock.calls.GetBlockedAreaCount, callInfo)
	mock.lockGetBlockedAreaCount.Unlock()
	return mock.GetBlockedAreaCountFunc(ctx, req)
}

// GetBlockedAreaCountCalls gets all the calls that were made to GetBlockedAreaCount.
// Check the length with:
//
//	len(mockedCantabularClient.GetBlockedAreaCountCalls())
func (mock *CantabularClientMock) GetBlockedAreaCountCalls() []struct {
	Ctx context.Context
	Req cantabular.GetBlockedAreaCountRequest
} {
	var calls []struct {
		Ctx context.Context
		Req cantabular.GetBlockedAreaCountRequest
	}
	mock.lockGetBlockedAreaCount.RLock()
	calls = mock.calls.GetBlockedAreaCount
	mock.lockGetBlockedAreaCount.RUnlock()
	return calls
}

// GetCategorisations calls GetCategorisationsFunc.
func (mock *CantabularClientMock) GetCategorisations(contextMoqParam context.Context, getCategorisationsRequest cantabular.GetCategorisationsRequest) (*cantabular.GetCategorisationsResponse, error) {
	if mock.GetCategorisationsFunc == nil {
		panic("CantabularClientMock.GetCategorisationsFunc: method is nil but CantabularClient.GetCategorisations was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		GetCategorisationsRequest cantabular.GetCategorisationsRequest
	}{
		ContextMoqParam:           contextMoqParam,
		GetCategorisationsRequest: getCategorisationsRequest,
	}
	mock.lockGetCategorisations.Lock()
	mock.calls.GetCategorisations = append(mock.calls.GetCategorisations, callInfo)
	mock.lockGetCategorisations.Unlock()
	return mock.GetCategorisationsFunc(contextMoqParam, getCategorisationsRequest)
}

// GetCategorisationsCalls gets all the calls that were made to GetCategorisations.
// Check the length with:
//
//	len(mockedCantabularClient.GetCategorisationsCalls())
func (mock *CantabularClientMock) GetCategorisationsCalls() []struct {
	ContextMoqParam           context.Context
	GetCategorisationsRequest cantabular.GetCategorisationsRequest
} {
	var calls []struct {
		ContextMoqParam           context.Context
		GetCategorisationsRequest cantabular.GetCategorisationsRequest
	}
	mock.lockGetCategorisations.RLock()
	calls = mock.calls.GetCategorisations
	mock.lockGetCategorisations.RUnlock()
	return calls
}

// GetDimensionCategories calls GetDimensionCategoriesFunc.
func (mock *CantabularClientMock) GetDimensionCategories(contextMoqParam context.Context, getDimensionCategoriesRequest cantabular.GetDimensionCategoriesRequest) (*cantabular.GetDimensionCategoriesResponse, error) {
	if mock.GetDimensionCategoriesFunc == nil {
		panic("CantabularClientMock.GetDimensionCategoriesFunc: method is nil but CantabularClient.GetDimensionCategories was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		GetDimensionCategoriesRequest cantabular.GetDimensionCategoriesRequest
	}{
		ContextMoqParam:               contextMoqParam,
		GetDimensionCategoriesRequest: getDimensionCategoriesRequest,
	}
	mock.lockGetDimensionCategories.Lock()
	mock.calls.GetDimensionCategories = append(mock.calls.GetDimensionCategories, callInfo)
	mock.lockGetDimensionCategories.Unlock()
	return mock.GetDimensionCategoriesFunc(contextMoqParam, getDimensionCategoriesRequest)
}

// GetDimensionCategoriesCalls gets all the calls that were made to GetDimensionCategories.
// Check the length with:
//
//	len(mockedCantabularClient.GetDimensionCategoriesCalls())
func (mock *CantabularClientMock) GetDimensionCategoriesCalls() []struct {
	ContextMoqParam               context.Context
	GetDimensionCategoriesRequest cantabular.GetDimensionCategoriesRequest
} {
	var calls []struct {
		ContextMoqParam               context.Context
		GetDimensionCategoriesRequest cantabular.GetDimensionCategoriesRequest
	}
	mock.lockGetDimensionCategories.RLock()
	calls = mock.calls.GetDimensionCategories
	mock.lockGetDimensionCategories.RUnlock()
	return calls
}

// GetDimensions calls GetDimensionsFunc.
func (mock *CantabularClientMock) GetDimensions(contextMoqParam context.Context, getDimensionsRequest cantabular.GetDimensionsRequest) (*cantabular.GetDimensionsResponse, error) {
	if mock.GetDimensionsFunc == nil {
		panic("CantabularClientMock.GetDimensionsFunc: method is nil but CantabularClient.GetDimensions was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		GetDimensionsRequest cantabular.GetDimensionsRequest
	}{
		ContextMoqParam:      contextMoqParam,
		GetDimensionsRequest: getDimensionsRequest,
	}
	mock.lockGetDimensions.Lock()
	mock.calls.GetDimensions = append(mock.calls.GetDimensions, callInfo)
	mock.lockGetDimensions.Unlock()
	return mock.GetDimensionsFunc(contextMoqParam, getDimensionsRequest)
}

// GetDimensionsCalls gets all the calls that were made to GetDimensions.
// Check the length with:
//
//	len(mockedCantabularClient.GetDimensionsCalls())
func (mock *CantabularClientMock) GetDimensionsCalls() []struct {
	ContextMoqParam      context.Context
	GetDimensionsRequest cantabular.GetDimensionsRequest
} {
	var calls []struct {
		ContextMoqParam      context.Context
		GetDimensionsRequest cantabular.GetDimensionsRequest
	}
	mock.lockGetDimensions.RLock()
	calls = mock.calls.GetDimensions
	mock.lockGetDimensions.RUnlock()
	return calls
}

// GetDimensionsDescription calls GetDimensionsDescriptionFunc.
func (mock *CantabularClientMock) GetDimensionsDescription(contextMoqParam context.Context, getDimensionsDescriptionRequest cantabular.GetDimensionsDescriptionRequest) (*cantabular.GetDimensionsResponse, error) {
	if mock.GetDimensionsDescriptionFunc == nil {
		panic("CantabularClientMock.GetDimensionsDescriptionFunc: method is nil but CantabularClient.GetDimensionsDescription was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		GetDimensionsDescriptionRequest cantabular.GetDimensionsDescriptionRequest
	}{
		ContextMoqParam:                 contextMoqParam,
		GetDimensionsDescriptionRequest: getDimensionsDescriptionRequest,
	}
	mock.lockGetDimensionsDescription.Lock()
	mock.calls.GetDimensionsDescription = append(mock.calls.GetDimensionsDescription, callInfo)
	mock.lockGetDimensionsDescription.Unlock()
	return mock.GetDimensionsDescriptionFunc(contextMoqParam, getDimensionsDescriptionRequest)
}

// GetDimensionsDescriptionCalls gets all the calls that were made to GetDimensionsDescription.
// Check the length with:
//
//	len(mockedCantabularClient.GetDimensionsDescriptionCalls())
func (mock *CantabularClientMock) GetDimensionsDescriptionCalls() []struct {
	ContextMoqParam                 context.Context
	GetDimensionsDescriptionRequest cantabular.GetDimensionsDescriptionRequest
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		GetDimensionsDescriptionRequest cantabular.GetDimensionsDescriptionRequest
	}
	mock.lockGetDimensionsDescription.RLock()
	calls = mock.calls.GetDimensionsDescription
	mock.lockGetDimensionsDescription.RUnlock()
	return calls
}

// GetGeographyDimensions calls GetGeographyDimensionsFunc.
func (mock *CantabularClientMock) GetGeographyDimensions(ctx context.Context, req cantabular.GetGeographyDimensionsRequest) (*cantabular.GetGeographyDimensionsResponse, error) {
	if mock.GetGeographyDimensionsFunc == nil {
		panic("CantabularClientMock.GetGeographyDimensionsFunc: method is nil but CantabularClient.GetGeographyDimensions was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req cantabular.GetGeographyDimensionsRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGetGeographyDimensions.Lock()
	mock.calls.GetGeographyDimensions = append(mock.calls.GetGeographyDimensions, callInfo)
	mock.lockGetGeographyDimensions.Unlock()
	return mock.GetGeographyDimensionsFunc(ctx, req)
}

// GetGeographyDimensionsCalls gets all the calls that were made to GetGeographyDimensions.
// Check the length with:
//
//	len(mockedCantabularClient.GetGeographyDimensionsCalls())
func (mock *CantabularClientMock) GetGeographyDimensionsCalls() []struct {
	Ctx context.Context
	Req cantabular.GetGeographyDimensionsRequest
} {
	var calls []struct {
		Ctx context.Context
		Req cantabular.GetGeographyDimensionsRequest
	}
	mock.lockGetGeographyDimensions.RLock()
	calls = mock.calls.GetGeographyDimensions
	mock.lockGetGeographyDimensions.RUnlock()
	return calls
}

// GetParentAreaCount calls GetParentAreaCountFunc.
func (mock *CantabularClientMock) GetParentAreaCount(ctx context.Context, req cantabular.GetParentAreaCountRequest) (*cantabular.GetParentAreaCountResult, error) {
	if mock.GetParentAreaCountFunc == nil {
		panic("CantabularClientMock.GetParentAreaCountFunc: method is nil but CantabularClient.GetParentAreaCount was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req cantabular.GetParentAreaCountRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGetParentAreaCount.Lock()
	mock.calls.GetParentAreaCount = append(mock.calls.GetParentAreaCount, callInfo)
	mock.lockGetParentAreaCount.Unlock()
	return mock.GetParentAreaCountFunc(ctx, req)
}

// GetParentAreaCountCalls gets all the calls that were made to GetParentAreaCount.
// Check the length with:
//
//	len(mockedCantabularClient.GetParentAreaCountCalls())
func (mock *CantabularClientMock) GetParentAreaCountCalls() []struct {
	Ctx context.Context
	Req cantabular.GetParentAreaCountRequest
} {
	var calls []struct {
		Ctx context.Context
		Req cantabular.GetParentAreaCountRequest
	}
	mock.lockGetParentAreaCount.RLock()
	calls = mock.calls.GetParentAreaCount
	mock.lockGetParentAreaCount.RUnlock()
	return calls
}

// GetParents calls GetParentsFunc.
func (mock *CantabularClientMock) GetParents(contextMoqParam context.Context, getParentsRequest cantabular.GetParentsRequest) (*cantabular.GetParentsResponse, error) {
	if mock.GetParentsFunc == nil {
		panic("CantabularClientMock.GetParentsFunc: method is nil but CantabularClient.GetParents was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		GetParentsRequest cantabular.GetParentsRequest
	}{
		ContextMoqParam:   contextMoqParam,
		GetParentsRequest: getParentsRequest,
	}
	mock.lockGetParents.Lock()
	mock.calls.GetParents = append(mock.calls.GetParents, callInfo)
	mock.lockGetParents.Unlock()
	return mock.GetParentsFunc(contextMoqParam, getParentsRequest)
}

// GetParentsCalls gets all the calls that were made to GetParents.
// Check the length with:
//
//	len(mockedCantabularClient.GetParentsCalls())
func (mock *CantabularClientMock) GetParentsCalls() []struct {
	ContextMoqParam   context.Context
	GetParentsRequest cantabular.GetParentsRequest
} {
	var calls []struct {
		ContextMoqParam   context.Context
		GetParentsRequest cantabular.GetParentsRequest
	}
	mock.lockGetParents.RLock()
	calls = mock.calls.GetParents
	mock.lockGetParents.RUnlock()
	return calls
}

// ListDatasets calls ListDatasetsFunc.
func (mock *CantabularClientMock) ListDatasets(contextMoqParam context.Context) (*cantabular.ListDatasetsResponse, error) {
	if mock.ListDatasetsFunc == nil {
		panic("CantabularClientMock.ListDatasetsFunc: method is nil but CantabularClient.ListDatasets was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockListDatasets.Lock()
	mock.calls.ListDatasets = append(mock.calls.ListDatasets, callInfo)
	mock.lockListDatasets.Unlock()
	return mock.ListDatasetsFunc(contextMoqParam)
}

// ListDatasetsCalls gets all the calls that were made to ListDatasets.
// Check the length with:
//
//	len(mockedCantabularClient.ListDatasetsCalls())
func (mock *CantabularClientMock) ListDatasetsCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockListDatasets.RLock()
	calls = mock.calls.ListDatasets
	mock.lockListDatasets.RUnlock()
	return calls
}

// StaticDatasetQuery calls StaticDatasetQueryFunc.
func (mock *CantabularClientMock) StaticDatasetQuery(contextMoqParam context.Context, staticDatasetQueryRequest cantabular.StaticDatasetQueryRequest) (*cantabular.StaticDatasetQuery, error) {
	if mock.StaticDatasetQueryFunc == nil {
		panic("CantabularClientMock.StaticDatasetQueryFunc: method is nil but CantabularClient.StaticDatasetQuery was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
	}{
		ContextMoqParam:           contextMoqParam,
		StaticDatasetQueryRequest: staticDatasetQueryRequest,
	}
	mock.lockStaticDatasetQuery.Lock()
	mock.calls.StaticDatasetQuery = append(mock.calls.StaticDatasetQuery, callInfo)
	mock.lockStaticDatasetQuery.Unlock()
	return mock.StaticDatasetQueryFunc(contextMoqParam, staticDatasetQueryRequest)
}

// StaticDatasetQueryCalls gets all the calls that were made to StaticDatasetQuery.
// Check the length with:
//
//	len(mockedCantabularClient.StaticDatasetQueryCalls())
func (mock *CantabularClientMock) StaticDatasetQueryCalls() []struct {
	ContextMoqParam           context.Context
	StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
} {
	var calls []struct {
		ContextMoqParam           context.Context
		StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
	}
	mock.lockStaticDatasetQuery.RLock()
	calls = mock.calls.StaticDatasetQuery
	mock.lockStaticDatasetQuery.RUnlock()
	return calls
}

// StaticDatasetQueryStreamJson calls StaticDatasetQueryStreamJsonFunc.
func (mock *CantabularClientMock) StaticDatasetQueryStreamJson(contextMoqParam context.Context, staticDatasetQueryRequest cantabular.StaticDatasetQueryRequest, fn func(ctx context.Context, r io.Reader) error) (cantabular.GetObservationsResponse, error) {
	if mock.StaticDatasetQueryStreamJsonFunc == nil {
		panic("CantabularClientMock.StaticDatasetQueryStreamJsonFunc: method is nil but CantabularClient.StaticDatasetQueryStreamJson was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
		Fn                        func(ctx context.Context, r io.Reader) error
	}{
		ContextMoqParam:           contextMoqParam,
		StaticDatasetQueryRequest: staticDatasetQueryRequest,
		Fn:                        fn,
	}
	mock.lockStaticDatasetQueryStreamJson.Lock()
	mock.calls.StaticDatasetQueryStreamJson = append(mock.calls.StaticDatasetQueryStreamJson, callInfo)
	mock.lockStaticDatasetQueryStreamJson.Unlock()
	return mock.StaticDatasetQueryStreamJsonFunc(contextMoqParam, staticDatasetQueryRequest, fn)
}

// StaticDatasetQueryStreamJsonCalls gets all the calls that were made to StaticDatasetQueryStreamJson.
// Check the length with:
//
//	len(mockedCantabularClient.StaticDatasetQueryStreamJsonCalls())
func (mock *CantabularClientMock) StaticDatasetQueryStreamJsonCalls() []struct {
	ContextMoqParam           context.Context
	StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
	Fn                        func(ctx context.Context, r io.Reader) error
} {
	var calls []struct {
		ContextMoqParam           context.Context
		StaticDatasetQueryRequest cantabular.StaticDatasetQueryRequest
		Fn                        func(ctx context.Context, r io.Reader) error
	}
	mock.lockStaticDatasetQueryStreamJson.RLock()
	calls = mock.calls.StaticDatasetQueryStreamJson
	mock.lockStaticDatasetQueryStreamJson.RUnlock()
	return calls
}

// StaticDatasetType calls StaticDatasetTypeFunc.
func (mock *CantabularClientMock) StaticDatasetType(ctx context.Context, datasetName string) (*gql.Dataset, error) {
	if mock.StaticDatasetTypeFunc == nil {
		panic("CantabularClientMock.StaticDatasetTypeFunc: method is nil but CantabularClient.StaticDatasetType was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		DatasetName string
	}{
		Ctx:         ctx,
		DatasetName: datasetName,
	}
	mock.lockStaticDatasetType.Lock()
	mock.calls.StaticDatasetType = append(mock.calls.StaticDatasetType, callInfo)
	mock.lockStaticDatasetType.Unlock()
	return mock.StaticDatasetTypeFunc(ctx, datasetName)
}

// StaticDatasetTypeCalls gets all the calls that were made to StaticDatasetType.
// Check the length with:
//
//	len(mockedCantabularClient.StaticDatasetTypeCalls())
func (mock *CantabularClientMock) StaticDatasetTypeCalls() []struct {
	Ctx         context.Context
	DatasetName string
} {
	var calls []struct {
		Ctx         context.Context
		DatasetName string
	}
	mock.lockStaticDatasetType.RLock()
	calls = mock.calls.StaticDatasetType
	mock.lockStaticDatasetType.RUnlock()
	return calls
}

// StatusCode calls StatusCodeFunc.
func (mock *CantabularClientMock) StatusCode(err error) int {
	if mock.StatusCodeFunc == nil {
		panic("CantabularClientMock.StatusCodeFunc: method is nil but CantabularClient.StatusCode was just called")
	}
	callInfo := struct {
		Err error
	}{
		Err: err,
	}
	mock.lockStatusCode.Lock()
	mock.calls.StatusCode = append(mock.calls.StatusCode, callInfo)
	mock.lockStatusCode.Unlock()
	return mock.StatusCodeFunc(err)
}

// StatusCodeCalls gets all the calls that were made to StatusCode.
// Check the length with:
//
//	len(mockedCantabularClient.StatusCodeCalls())
func (mock *CantabularClientMock) StatusCodeCalls() []struct {
	Err error
} {
	var calls []struct {
		Err error
	}
	mock.lockStatusCode.RLock()
	calls = mock.calls.StatusCode
	mock.lockStatusCode.RUnlock()
	return calls
}
