// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/cantabular"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-population-types-api/service"
	"sync"
)

// Ensure, that CantabularClientMock does implement service.CantabularClient.
// If this is not the case, regenerate this file with moq.
var _ service.CantabularClient = &CantabularClientMock{}

// CantabularClientMock is a mock implementation of service.CantabularClient.
//
// 	func TestSomethingThatUsesCantabularClient(t *testing.T) {
//
// 		// make and configure a mocked service.CantabularClient
// 		mockedCantabularClient := &CantabularClientMock{
// 			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetAreasFunc: func(contextMoqParam context.Context, getAreasRequest cantabular.GetAreasRequest) (*cantabular.GetAreasResponse, error) {
// 				panic("mock out the GetAreas method")
// 			},
// 			GetDimensionsFunc: func(contextMoqParam context.Context, getDimensionsRequest cantabular.GetDimensionsRequest) (*cantabular.GetDimensionsResponse, error) {
// 				panic("mock out the GetDimensions method")
// 			},
// 			GetGeographyDimensionsFunc: func(ctx context.Context, req cantabular.GetGeographyDimensionsRequest) (*cantabular.GetGeographyDimensionsResponse, error) {
// 				panic("mock out the GetGeographyDimensions method")
// 			},
// 			GetParentsFunc: func(contextMoqParam context.Context, getParentsRequest cantabular.GetParentsRequest) (*cantabular.GetParentsResponse, error) {
// 				panic("mock out the GetParents method")
// 			},
// 			ListDatasetsFunc: func(ctx context.Context) ([]string, error) {
// 				panic("mock out the ListDatasets method")
// 			},
// 			StatusCodeFunc: func(err error) int {
// 				panic("mock out the StatusCode method")
// 			},
// 		}
//
// 		// use mockedCantabularClient in code that requires service.CantabularClient
// 		// and then make assertions.
//
// 	}
type CantabularClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// GetAreasFunc mocks the GetAreas method.
	GetAreasFunc func(contextMoqParam context.Context, getAreasRequest cantabular.GetAreasRequest) (*cantabular.GetAreasResponse, error)

	// GetDimensionsFunc mocks the GetDimensions method.
	GetDimensionsFunc func(contextMoqParam context.Context, getDimensionsRequest cantabular.GetDimensionsRequest) (*cantabular.GetDimensionsResponse, error)

	// GetGeographyDimensionsFunc mocks the GetGeographyDimensions method.
	GetGeographyDimensionsFunc func(ctx context.Context, req cantabular.GetGeographyDimensionsRequest) (*cantabular.GetGeographyDimensionsResponse, error)

	// GetParentsFunc mocks the GetParents method.
	GetParentsFunc func(contextMoqParam context.Context, getParentsRequest cantabular.GetParentsRequest) (*cantabular.GetParentsResponse, error)

	// ListDatasetsFunc mocks the ListDatasets method.
	ListDatasetsFunc func(ctx context.Context) ([]string, error)

	// StatusCodeFunc mocks the StatusCode method.
	StatusCodeFunc func(err error) int

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// GetAreas holds details about calls to the GetAreas method.
		GetAreas []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetAreasRequest is the getAreasRequest argument value.
			GetAreasRequest cantabular.GetAreasRequest
		}
		// GetDimensions holds details about calls to the GetDimensions method.
		GetDimensions []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetDimensionsRequest is the getDimensionsRequest argument value.
			GetDimensionsRequest cantabular.GetDimensionsRequest
		}
		// GetGeographyDimensions holds details about calls to the GetGeographyDimensions method.
		GetGeographyDimensions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req cantabular.GetGeographyDimensionsRequest
		}
		// GetParents holds details about calls to the GetParents method.
		GetParents []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetParentsRequest is the getParentsRequest argument value.
			GetParentsRequest cantabular.GetParentsRequest
		}
		// ListDatasets holds details about calls to the ListDatasets method.
		ListDatasets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// StatusCode holds details about calls to the StatusCode method.
		StatusCode []struct {
			// Err is the err argument value.
			Err error
		}
	}
	lockChecker                sync.RWMutex
	lockGetAreas               sync.RWMutex
	lockGetDimensions          sync.RWMutex
	lockGetGeographyDimensions sync.RWMutex
	lockGetParents             sync.RWMutex
	lockListDatasets           sync.RWMutex
	lockStatusCode             sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *CantabularClientMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("CantabularClientMock.CheckerFunc: method is nil but CantabularClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedCantabularClient.CheckerCalls())
func (mock *CantabularClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetAreas calls GetAreasFunc.
func (mock *CantabularClientMock) GetAreas(contextMoqParam context.Context, getAreasRequest cantabular.GetAreasRequest) (*cantabular.GetAreasResponse, error) {
	if mock.GetAreasFunc == nil {
		panic("CantabularClientMock.GetAreasFunc: method is nil but CantabularClient.GetAreas was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetAreasRequest cantabular.GetAreasRequest
	}{
		ContextMoqParam: contextMoqParam,
		GetAreasRequest: getAreasRequest,
	}
	mock.lockGetAreas.Lock()
	mock.calls.GetAreas = append(mock.calls.GetAreas, callInfo)
	mock.lockGetAreas.Unlock()
	return mock.GetAreasFunc(contextMoqParam, getAreasRequest)
}

// GetAreasCalls gets all the calls that were made to GetAreas.
// Check the length with:
//     len(mockedCantabularClient.GetAreasCalls())
func (mock *CantabularClientMock) GetAreasCalls() []struct {
	ContextMoqParam context.Context
	GetAreasRequest cantabular.GetAreasRequest
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetAreasRequest cantabular.GetAreasRequest
	}
	mock.lockGetAreas.RLock()
	calls = mock.calls.GetAreas
	mock.lockGetAreas.RUnlock()
	return calls
}

// GetDimensions calls GetDimensionsFunc.
func (mock *CantabularClientMock) GetDimensions(contextMoqParam context.Context, getDimensionsRequest cantabular.GetDimensionsRequest) (*cantabular.GetDimensionsResponse, error) {
	if mock.GetDimensionsFunc == nil {
		panic("CantabularClientMock.GetDimensionsFunc: method is nil but CantabularClient.GetDimensions was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		GetDimensionsRequest cantabular.GetDimensionsRequest
	}{
		ContextMoqParam:      contextMoqParam,
		GetDimensionsRequest: getDimensionsRequest,
	}
	mock.lockGetDimensions.Lock()
	mock.calls.GetDimensions = append(mock.calls.GetDimensions, callInfo)
	mock.lockGetDimensions.Unlock()
	return mock.GetDimensionsFunc(contextMoqParam, getDimensionsRequest)
}

// GetDimensionsCalls gets all the calls that were made to GetDimensions.
// Check the length with:
//     len(mockedCantabularClient.GetDimensionsCalls())
func (mock *CantabularClientMock) GetDimensionsCalls() []struct {
	ContextMoqParam      context.Context
	GetDimensionsRequest cantabular.GetDimensionsRequest
} {
	var calls []struct {
		ContextMoqParam      context.Context
		GetDimensionsRequest cantabular.GetDimensionsRequest
	}
	mock.lockGetDimensions.RLock()
	calls = mock.calls.GetDimensions
	mock.lockGetDimensions.RUnlock()
	return calls
}

// GetGeographyDimensions calls GetGeographyDimensionsFunc.
func (mock *CantabularClientMock) GetGeographyDimensions(ctx context.Context, req cantabular.GetGeographyDimensionsRequest) (*cantabular.GetGeographyDimensionsResponse, error) {
	if mock.GetGeographyDimensionsFunc == nil {
		panic("CantabularClientMock.GetGeographyDimensionsFunc: method is nil but CantabularClient.GetGeographyDimensions was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req cantabular.GetGeographyDimensionsRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockGetGeographyDimensions.Lock()
	mock.calls.GetGeographyDimensions = append(mock.calls.GetGeographyDimensions, callInfo)
	mock.lockGetGeographyDimensions.Unlock()
	return mock.GetGeographyDimensionsFunc(ctx, req)
}

// GetGeographyDimensionsCalls gets all the calls that were made to GetGeographyDimensions.
// Check the length with:
//     len(mockedCantabularClient.GetGeographyDimensionsCalls())
func (mock *CantabularClientMock) GetGeographyDimensionsCalls() []struct {
	Ctx context.Context
	Req cantabular.GetGeographyDimensionsRequest
} {
	var calls []struct {
		Ctx context.Context
		Req cantabular.GetGeographyDimensionsRequest
	}
	mock.lockGetGeographyDimensions.RLock()
	calls = mock.calls.GetGeographyDimensions
	mock.lockGetGeographyDimensions.RUnlock()
	return calls
}

// GetParents calls GetParentsFunc.
func (mock *CantabularClientMock) GetParents(contextMoqParam context.Context, getParentsRequest cantabular.GetParentsRequest) (*cantabular.GetParentsResponse, error) {
	if mock.GetParentsFunc == nil {
		panic("CantabularClientMock.GetParentsFunc: method is nil but CantabularClient.GetParents was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		GetParentsRequest cantabular.GetParentsRequest
	}{
		ContextMoqParam:   contextMoqParam,
		GetParentsRequest: getParentsRequest,
	}
	mock.lockGetParents.Lock()
	mock.calls.GetParents = append(mock.calls.GetParents, callInfo)
	mock.lockGetParents.Unlock()
	return mock.GetParentsFunc(contextMoqParam, getParentsRequest)
}

// GetParentsCalls gets all the calls that were made to GetParents.
// Check the length with:
//     len(mockedCantabularClient.GetParentsCalls())
func (mock *CantabularClientMock) GetParentsCalls() []struct {
	ContextMoqParam   context.Context
	GetParentsRequest cantabular.GetParentsRequest
} {
	var calls []struct {
		ContextMoqParam   context.Context
		GetParentsRequest cantabular.GetParentsRequest
	}
	mock.lockGetParents.RLock()
	calls = mock.calls.GetParents
	mock.lockGetParents.RUnlock()
	return calls
}

// ListDatasets calls ListDatasetsFunc.
func (mock *CantabularClientMock) ListDatasets(ctx context.Context) ([]string, error) {
	if mock.ListDatasetsFunc == nil {
		panic("CantabularClientMock.ListDatasetsFunc: method is nil but CantabularClient.ListDatasets was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListDatasets.Lock()
	mock.calls.ListDatasets = append(mock.calls.ListDatasets, callInfo)
	mock.lockListDatasets.Unlock()
	return mock.ListDatasetsFunc(ctx)
}

// ListDatasetsCalls gets all the calls that were made to ListDatasets.
// Check the length with:
//     len(mockedCantabularClient.ListDatasetsCalls())
func (mock *CantabularClientMock) ListDatasetsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListDatasets.RLock()
	calls = mock.calls.ListDatasets
	mock.lockListDatasets.RUnlock()
	return calls
}

// StatusCode calls StatusCodeFunc.
func (mock *CantabularClientMock) StatusCode(err error) int {
	if mock.StatusCodeFunc == nil {
		panic("CantabularClientMock.StatusCodeFunc: method is nil but CantabularClient.StatusCode was just called")
	}
	callInfo := struct {
		Err error
	}{
		Err: err,
	}
	mock.lockStatusCode.Lock()
	mock.calls.StatusCode = append(mock.calls.StatusCode, callInfo)
	mock.lockStatusCode.Unlock()
	return mock.StatusCodeFunc(err)
}

// StatusCodeCalls gets all the calls that were made to StatusCode.
// Check the length with:
//     len(mockedCantabularClient.StatusCodeCalls())
func (mock *CantabularClientMock) StatusCodeCalls() []struct {
	Err error
} {
	var calls []struct {
		Err error
	}
	mock.lockStatusCode.RLock()
	calls = mock.calls.StatusCode
	mock.lockStatusCode.RUnlock()
	return calls
}
